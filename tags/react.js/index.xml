<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React.js on Chris Lin&#39;s Blog</title>
    <link>https://ChrisLinOvO.github.io/tags/react.js/</link>
    <description>Recent content in React.js on Chris Lin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 27 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ChrisLinOvO.github.io/tags/react.js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端優化- Throttle &amp; Debounce</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/throttle-debounce-difference/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/throttle-debounce-difference/</guid>
      <description>前言 以下是我針對 throttle &amp;amp; debounce 兩種方法在React上實作。
Throttle (節流) 以下範例用throttle實現Infinite Scroll效果。</description>
    </item>
    
    <item>
      <title>午餐機器人</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/portfolio-lunch-linebot/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/portfolio-lunch-linebot/</guid>
      <description>前言 當時在前公司訂便當的時候，都要跑去每個人座位詢問，挺麻煩的!
於是決定與一位後端同仁一起搭建午餐機器人。
架構 這邊我是用 Feathers + MongoDB Atlas 部署到 Render 作品</description>
    </item>
    
    <item>
      <title>End-to-End (E2E) Testing</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/react-e2e-testing/</link>
      <pubDate>Wed, 08 Nov 2023 10:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/react-e2e-testing/</guid>
      <description>前言 E2E 測試在模擬真實用戶在應用程式中的實際使用情境，驗證各個組件之間功能是否正常。
主要測試目標如下：
驗證應用功能：測試將模擬用戶與應用程式的互動情境，例如填寫表單、點擊按鈕、導航到不同頁面等，以確保所有功能正常運作。
測試使用者界面（UI）：測試使用者界面，以確保 UI 元素的正確性和可用性。這包括驗證頁面佈局、樣式、互動和使用者體驗。
跨瀏覽器和跨平台兼容性：測試不同的瀏覽器和操作系統上運行，以確保應用程式在各種環境中都能正常運作。這有助於發現和解決跨瀏覽器和跨平台兼容性問題。
性能測試：測試應用程式的性能，例如加載時間、響應時間和並發用戶支援。這有助於發現性能瓶頸和優化機會。</description>
    </item>
    
    <item>
      <title>Use Jest</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/react-jest/</link>
      <pubDate>Tue, 07 Nov 2023 22:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/react-jest/</guid>
      <description>前言 紀錄一些重點
使用 Jest 進行快照測試 每當您想要確保 UI 不會意外更改時，快照測試都是一個非常有用的工具。
第一次執行此測試時，Jest 會在__tests__目錄內建立__snapshots__目錄，裡面建立一個 snapshot 檔案，檔名會是測試檔的名稱再加上.</description>
    </item>
    
    <item>
      <title>React Testing Enzyme</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/react-testing-enzyme/</link>
      <pubDate>Tue, 07 Nov 2023 18:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/react-testing-enzyme/</guid>
      <description>前言 React Testing Enzyme 主要介紹幾個方法：shallow、render、mount。
函數 渲染範圍 子元件渲染 事件模擬 shallow 只渲染元件本身 不渲染子元件 支援事件模擬 render 產生靜態 HTML 字串 不在真實 DOM 渲染 不支援事件模擬 mount 渲染整個 React 樹 渲染所有子元件 支援事件模擬 範例 使用shallow函數： 情境：測試一個 React 按鈕元件的點擊事件處理，而不需要渲染其子元件。</description>
    </item>
    
    <item>
      <title>React Testing Library</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/react-testing-library/</link>
      <pubDate>Tue, 07 Nov 2023 16:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/react-testing-library/</guid>
      <description>前言 React Testing Library 主要提供幾個方法：render、fireEvent、screen、waitFor。
前置設定需搭配 @testing-library/jest-dom。
什麼時候該用此 Library 可參考官方Solution render 用於渲染 React 組件到虛擬 DOM 中，並返回一個包含渲染結果的容器對象。</description>
    </item>
    
    <item>
      <title>React Hooks Testing Library</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/react-hooks-testing-library/</link>
      <pubDate>Tue, 07 Nov 2023 14:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/react-hooks-testing-library/</guid>
      <description>前言 React Hooks Testing Library 主要提供三個方法：renderHook、act、cleanup。
什麼時候該用此 Library 官方Solution 使用</description>
    </item>
    
    <item>
      <title>物業系統</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/property-notes/</link>
      <pubDate>Tue, 07 Nov 2023 10:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/property-notes/</guid>
      <description>前言 這是一個物業管理，其中也有硬體端整合，這套系統從零到現在正式上線，我全程參與，包含事前規劃流程設計、UI討論。
技術架構 前後端分離，前端用 React.js 開發及 icejs+(fusion/antd)UI，完成管理者後台介面及 APP 使用者介面 使用 Feathers 框架創建 REST API 和 WebSocket 與後端溝通，帳號權限處理、帳號登入登出機制 資料庫使用 MongoDB 使用 Docker-compose 部屬到公司購買實體主機 功能介紹 使用者APP介面 帳號設置：綁定社區、QRCode掃描或帳密登入建立帳號。</description>
    </item>
    
    <item>
      <title>複合型健身房官方網站「WoW FIT」</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/portfolio-wow-fit/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/portfolio-wow-fit/</guid>
      <description>前言 是一個在「資策會」做的專題，從規劃、設計、實作、發表，總共花了一個多月時程。
使用技術及工具 設計/原形工具：Illustrator、Adobe XD 前端技術：HTML、CSS、SCSS、JavaScript 前端框架：React.js 後端技術：Node.js、Express 資料庫運用：MySQL 版本控制：GitHub 套件技術：axios、node-sass、react-redux、redux-persist、redux-saga、reselect 編輯器技術： VS Code 功能說明： 首頁 會員登入註冊 會員中心系統 商城&amp;amp;購物車系統 結帳&amp;amp;訂單系統 課程預約系統 教練中心系統 心得討論區系統 客服中心系統 網站功能介紹 首頁 會員登入註冊 會員中心系統 登入後，即可進入會員中⼼，提供會員資料修改並管理購買清單以及查詢已報名之課程、⽂章管理以及客訴紀錄。</description>
    </item>
    
  </channel>
</rss>
