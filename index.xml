<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Lin&#39;s Blog</title>
    <link>https://ChrisLinOvO.github.io/</link>
    <description>Recent content on Chris Lin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 24 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ChrisLinOvO.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Zustand 實作 Todo List</title>
      <link>https://ChrisLinOvO.github.io/blogs/2024/03/react-zustand-todos/</link>
      <pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2024/03/react-zustand-todos/</guid>
      <description>前言 因為工作需要使用到 Zustand，這邊稍微研究一下並實作 Todo List。
Zustand 現在 react 的相關套件裡面最使用最廣泛的全域管理工具應該是 Redux，在工作上較大的專案也都是使用 Redux 在做狀態管理，但是我想要介紹另外一個比較輕量狀態管理工具，Zustand 官方文件。</description>
    </item>
    
    <item>
      <title>前端優化- Throttle &amp; Debounce</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/throttle-debounce-difference/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/throttle-debounce-difference/</guid>
      <description>前言 以下是我針對 throttle &amp;amp; debounce 兩種方法在React上實作。
Throttle (節流) 以下範例用throttle實現Infinite Scroll效果。</description>
    </item>
    
    <item>
      <title>午餐機器人</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/portfolio-lunch-linebot/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/portfolio-lunch-linebot/</guid>
      <description>前言 當時在前公司訂便當的時候，都要跑去每個人座位詢問，挺麻煩的!
於是決定與一位後端同仁一起搭建午餐機器人。
架構 這邊我是用 Feathers + MongoDB Atlas 部署到 Render 作品</description>
    </item>
    
    <item>
      <title>Lodash Introduction</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/lodash-introduction/</link>
      <pubDate>Wed, 08 Nov 2023 15:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/lodash-introduction/</guid>
      <description>前言 Lodash 是一個 JavaScript library，提供了很多常用的函式，處理資料可以省去很多時間，有時候也會比原生 JS 的效能還要好。
安裝 透過 npm</description>
    </item>
    
    <item>
      <title>End-to-End (E2E) Testing</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/react-e2e-testing/</link>
      <pubDate>Wed, 08 Nov 2023 10:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/react-e2e-testing/</guid>
      <description>前言 E2E 測試在模擬真實用戶在應用程式中的實際使用情境，驗證各個組件之間功能是否正常。
主要測試目標如下：
驗證應用功能：測試將模擬用戶與應用程式的互動情境，例如填寫表單、點擊按鈕、導航到不同頁面等，以確保所有功能正常運作。
測試使用者界面（UI）：測試使用者界面，以確保 UI 元素的正確性和可用性。這包括驗證頁面佈局、樣式、互動和使用者體驗。
跨瀏覽器和跨平台兼容性：測試不同的瀏覽器和操作系統上運行，以確保應用程式在各種環境中都能正常運作。這有助於發現和解決跨瀏覽器和跨平台兼容性問題。
性能測試：測試應用程式的性能，例如加載時間、響應時間和並發用戶支援。這有助於發現性能瓶頸和優化機會。</description>
    </item>
    
    <item>
      <title>Use Jest</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/react-jest/</link>
      <pubDate>Tue, 07 Nov 2023 22:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/react-jest/</guid>
      <description>前言 紀錄一些重點
使用 Jest 進行快照測試 每當您想要確保 UI 不會意外更改時，快照測試都是一個非常有用的工具。
第一次執行此測試時，Jest 會在__tests__目錄內建立__snapshots__目錄，裡面建立一個 snapshot 檔案，檔名會是測試檔的名稱再加上.</description>
    </item>
    
    <item>
      <title>React Testing Enzyme</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/react-testing-enzyme/</link>
      <pubDate>Tue, 07 Nov 2023 18:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/react-testing-enzyme/</guid>
      <description>前言 React Testing Enzyme 主要介紹幾個方法：shallow、render、mount。
函數 渲染範圍 子元件渲染 事件模擬 shallow 只渲染元件本身 不渲染子元件 支援事件模擬 render 產生靜態 HTML 字串 不在真實 DOM 渲染 不支援事件模擬 mount 渲染整個 React 樹 渲染所有子元件 支援事件模擬 範例 使用shallow函數： 情境：測試一個 React 按鈕元件的點擊事件處理，而不需要渲染其子元件。</description>
    </item>
    
    <item>
      <title>React Testing Library</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/react-testing-library/</link>
      <pubDate>Tue, 07 Nov 2023 16:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/react-testing-library/</guid>
      <description>前言 React Testing Library 主要提供幾個方法：render、fireEvent、screen、waitFor。
前置設定需搭配 @testing-library/jest-dom。
什麼時候該用此 Library 可參考官方Solution render 用於渲染 React 組件到虛擬 DOM 中，並返回一個包含渲染結果的容器對象。</description>
    </item>
    
    <item>
      <title>React Hooks Testing Library</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/react-hooks-testing-library/</link>
      <pubDate>Tue, 07 Nov 2023 14:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/react-hooks-testing-library/</guid>
      <description>前言 React Hooks Testing Library 主要提供三個方法：renderHook、act、cleanup。
什麼時候該用此 Library 官方Solution 使用</description>
    </item>
    
    <item>
      <title>物業系統</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/property-notes/</link>
      <pubDate>Tue, 07 Nov 2023 10:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/property-notes/</guid>
      <description>前言 這是一個物業管理，其中也有硬體端整合，這套系統從零到現在正式上線，我全程參與，包含事前規劃流程設計、UI討論。
技術架構 前後端分離，前端用 React.js 開發及 icejs+(fusion/antd)UI，完成管理者後台介面及 APP 使用者介面 使用 Feathers 框架創建 REST API 和 WebSocket 與後端溝通，帳號權限處理、帳號登入登出機制 資料庫使用 MongoDB 使用 Docker-compose 部屬到公司購買實體主機 功能介紹 使用者APP介面 帳號設置：綁定社區、QRCode掃描或帳密登入建立帳號。</description>
    </item>
    
    <item>
      <title>複合型健身房官方網站「WoW FIT」</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/portfolio-wow-fit/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/portfolio-wow-fit/</guid>
      <description>前言 是一個在「資策會」做的專題，從規劃、設計、實作、發表，總共花了一個多月時程。
使用技術及工具 設計/原形工具：Illustrator、Adobe XD 前端技術：HTML、CSS、SCSS、JavaScript 前端框架：React.js 後端技術：Node.js、Express 資料庫運用：MySQL 版本控制：GitHub 套件技術：axios、node-sass、react-redux、redux-persist、redux-saga、reselect 編輯器技術： VS Code 功能說明： 首頁 會員登入註冊 會員中心系統 商城&amp;amp;購物車系統 結帳&amp;amp;訂單系統 課程預約系統 教練中心系統 心得討論區系統 客服中心系統 網站功能介紹 首頁 會員登入註冊 會員中心系統 登入後，即可進入會員中⼼，提供會員資料修改並管理購買清單以及查詢已報名之課程、⽂章管理以及客訴紀錄。</description>
    </item>
    
    <item>
      <title>Matching Game</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/11/portfolio-match-game/</link>
      <pubDate>Thu, 02 Nov 2023 10:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/11/portfolio-match-game/</guid>
      <description>前言 這是我練習用 React Native 來寫 App，並使用 Expo 呈現
以下用 Expo 線上工具 Demo 進到 Expo 可以針對不同 Device 查案 以下環境是 iOS 遊戲規則：直到全部配對成功</description>
    </item>
    
    <item>
      <title>Line LIFF ShareTargetPicker</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/10/portfolio-line-sharetargetpicker/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/10/portfolio-line-sharetargetpicker/</guid>
      <description>前言 之前在前公司有用到 Line shareTargetPicker API 的應用，用來發送訪客 QR code 給 Line 好友，這邊做一個簡單 Demo，單純轉發當前 URL 給好友。</description>
    </item>
    
    <item>
      <title>LineBot 關鍵字儲存查詢</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/10/portfolio-qq-linebot/</link>
      <pubDate>Sun, 29 Oct 2023 23:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/10/portfolio-qq-linebot/</guid>
      <description>前言 依照個人喜好做出各種風格的機器人像是 AI 聊天，接收到的文字另存至資料庫等
建立 Line bot 步驟 1：在 LINE Developers 登入自己Line帳號 步驟 2：建立 line 頻道 選擇 Messaging API</description>
    </item>
    
    <item>
      <title>Heroku 轉移至 Fly.io </title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/10/heroku-to-flyio/</link>
      <pubDate>Sun, 29 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/10/heroku-to-flyio/</guid>
      <description>前言 由於 Heroku 取消了免費的服務&amp;hellip;個人作品都壞掉了，因此換成 Fly.io 部署
在 Ｆly.io 建立專案 步驟 1：安裝 flyctl 這裡教學以 macOS 為例，可參考 官網 。</description>
    </item>
    
    <item>
      <title>解決 Hugo Markdown 連結無法另開網頁問題</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/10/target-blank-logo/</link>
      <pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/10/target-blank-logo/</guid>
      <description>前言 在寫 Markdown 文章時候，想要為 link 添加 {target=&amp;quot;_blank&amp;quot;} 屬性參考文章，但卻起不了作用(會變字串)。
這是一個連結[網站](http://example.com){target=&amp;#34;_blank&amp;#34;}的示例。 這是在猜想可能是 Hugo 版本不相容，就用上網找了解法，他說：Hugo 的安全模式可能會阻止執行 JavaScript。在安全模式下，Hugo 默認會禁用 JavaScript 和某些 HTML 標籤以增加網站的安全性。</description>
    </item>
    
    <item>
      <title>Hugo SEO（搜尋引擎優化）實踐</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/10/hugo-seo/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/10/hugo-seo/</guid>
      <description>前言 SEO是什麼？： SEO 代表搜索引擎優化，它是一系列策略和技術，用於提高網站在搜索引擎中的排名。
為什麼它如此重要？： SEO 是吸引有機流量、提高品牌知名度、增加潛在客戶和改善線上業務成功的關鍵因素。
本文的目標：以下是使用 Hugo 產生靜態網頁的 SEO 最佳化建議。</description>
    </item>
    
    <item>
      <title>如何在 Google Analytics 4 自訂事件&amp;轉換</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/10/google-analytics-setting/</link>
      <pubDate>Wed, 25 Oct 2023 22:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/10/google-analytics-setting/</guid>
      <description>前言 想要針對各特定頁面觸發事件和追蹤點擊事件，該怎麼做？
特定頁面觸發事件 步驟 1：建立事件 可到 Google Analytics 點選左下角齒輪管理/資源設定/事件創建。
這邊舉例/about頁面事件</description>
    </item>
    
    <item>
      <title>Google Analytics 4 介紹</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/10/google-analytics-introduction/</link>
      <pubDate>Wed, 25 Oct 2023 20:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/10/google-analytics-introduction/</guid>
      <description>前言 介紹通用版 GA 與 GA4 差異 通用版 GA：追蹤網頁資料為核心。
GA4：事件為核心。
這個簡單的表格比較了通用版 GA 和 GA4 在數據收集方式、用戶跟踪、報告功能、用戶隱私和未來支持等方面的主要差異。</description>
    </item>
    
    <item>
      <title>添加 Google Search Console</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/10/google-search-console/</link>
      <pubDate>Wed, 25 Oct 2023 10:00:00 +0800</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/10/google-search-console/</guid>
      <description>前言 目的想在 Google 被搜尋到我的個人 Blog
開始添加 Google Search Console 步驟 1：點擊 Google Search Console，後按下「立即開始」，就可以開始設定 步驟 2：選取資源類型 點擊網址前置字元區塊，輸入個人網站網址後，按繼續，這時如果有設定好 GA，他這邊會透過 GA 去驗證你的網站，點擊前往資源。</description>
    </item>
    
    <item>
      <title>Hugo 添加 Google Analytics</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/10/hugo-google-analytics/</link>
      <pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/10/hugo-google-analytics/</guid>
      <description>前言 想查看使用者對於我的網站網站互動
開始添加 Google Analytics 步驟 1：點擊 Google Analytics，後按下「開始測量」，就可以開始設定 步驟 2：建立帳戶 輸入帳戶名稱後，往下拉下面不用改，按下一步。</description>
    </item>
    
    <item>
      <title> Hugo 添加評論功能</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/10/hugo-comments/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/10/hugo-comments/</guid>
      <description>前言 Utterances 是一種基於 GitHub Issues 的評論系統。它允許在靜態網站中嵌入一個評論框，並將評論存儲在與自己的 GitHub 存儲庫相關聯的 Issues 中。</description>
    </item>
    
    <item>
      <title>使用 Hugo 在 GitHub 上架設個人網站</title>
      <link>https://ChrisLinOvO.github.io/blogs/2023/10/jekyll-to-hugo/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ChrisLinOvO.github.io/blogs/2023/10/jekyll-to-hugo/</guid>
      <description>前言 之前用的 Jekyll 主題創作者沒在維護，現在版本的 GitHub 不能 build 了，轉移至 Hugo 架設個人網站</description>
    </item>
    
  </channel>
</rss>
