[{"categories":["Portfolio"],"contents":"前言 這是我練習用 React Native 來寫 App，並使用 Expo 呈現\n以下用 Expo 線上工具 Demo 進到 Expo 可以針對不同 Device 查案 以下環境是 iOS 遊戲規則：直到全部配對成功\n結語 重 0 開始建置 React Native ，讓我更清楚架構。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/portfolio-match-game/","tags":["React Native"],"title":"Matching Game"},{"categories":["Portfolio"],"contents":"前言 當時在前公司訂便當的時候，都要跑去每個人座位詢問，挺麻煩的!\n於是決定與一位後端同仁一起搭建午餐機器人。\n架構 這邊我是用 Feathers + MongoDB Atlas 部署到 Render 作品\n後台介面：Feathers、React 和 Feathers Socket.IO 創建一個實時應用程序，並實現數據的即時更新。 LineBot：設定 Channel ID、Channel Secret\u0026hellip;等必要資訊，並 Webhook 路由及處理 LineBot 事件 測試環境用 Ngrok 建立一個 LineBot Webhook 的 HTTPS URL 步驟 1：在 Ngrok官網 創建一個帳戶 步驟 2：執行 Ngrok 下載並解壓縮後你會獲得一個 ngrok 的執行檔。\nMac 環境變數設定：需要將 ngrok 執行檔拖曳到 /usr/local/bin/ 資料夾內。\n切換到/bin目錄 將 Webhook 轉發到本地端口（例如 3030）。\n啟動服務 可以看到 Forwarding 有一個 https 服務，到時候就可以貼到 LineBot Webhook。\nLineBot設定就不再探討，可以去我寫的 LineBot 關鍵字儲存查詢 文章看\n午餐機器人及後台管理 Demo 可在後台新建菜單 這時候可以看見LineBot輸入吃(這邊是我們自己下的指令)，就會產生訂單 接著按下開始訂單，就依照機器人回覆輸入相對應文字 後台介面就可以看到在 LineBot 輸入的資訊了 也可以對成員新增、編輯、刪除、查詢 當同事過來給當天值日生繳錢時，就可以按下付錢，後台頁面也會統計誰沒繳方便查詢 結語 以上就是我們替同事製作的午餐 Bot，大家只要加官方帳號，動手輸入一些指令就能輕鬆訂便當，真的方便許多🎉\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/portfolio-lunch-linebot/","tags":["LineBot","Line","Ngrok","React","Feathers"],"title":"午餐機器人"},{"categories":["Portfolio"],"contents":"前言 之前在前公司有用到 Line shareTargetPicker API 的應用，用來發送訪客 QR code 給 Line 好友，這邊做一個簡單 Demo，單純轉發當前 URL 給好友。\nLine LIFF ShareTargetPicker 教學 步驟 1：進到 developerse官網 建立 channel 選擇 Products，請選擇LINE Login，然後Create a new channel\n步驟 2：建立 LIFF 這時點選頁籤LIFF按下Add。\n以下說明 LIFF 表單\nSize：這一項有三個值 Full、Tall、Compact，說明 LINE 打開 LIFF 時，他的大小要多大。 要注意的是，分享的按鈕只會在「Full」這個 Size 出現。\nEndpoint URL ：使用者點擊了 LIFF 的連結，實際上 LIFF 是開啟了哪個頁面。\nScopes ：指的是我們想要取哪些資料，「chat_message.write」，這項是如果要用到主動幫使用者發訊息的 sendMessages 函式時，這邊就必須打勾，不然 sendMessages 就無法使用。\nAdd friend option ：當使用者要登入我們建立的 LIFF 時，要怎麼推薦他加入我們的 LINE。\nScan QR ：指要不要使用 LIFF 的打開 QR code 掃描器功能。\n步驟 3：建立 LIFF 完成 建立完成後記得勾選shareTargetPicker，這項功能是主動讓使用者發送我們指定的訊息給他的好友。\nLIFF ID這個要先記起來，之後寫 JS 用到。\n步驟 4：LIFF 轉成公開 進到 LINE Developers 的後台，進到我們創建的 LIFF，會有一個Developing的按鈕，需要按下Publish就會轉成公開\n程式碼參考範例 Demo 影片 結語 主要是可以讓使用者用 Line 就可以快速分享該頁面。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/portfolio-line-sharetargetpicker/","tags":["Line"],"title":"Line LIFF ShareTargetPicker"},{"categories":["Portfolio"],"contents":"前言 依照個人喜好做出各種風格的機器人像是 AI 聊天，接收到的文字另存至資料庫等\n建立 Line bot 步驟 1：在 LINE Developers 登入自己Line帳號 步驟 2：建立 line 頻道 選擇 Messaging API\n步驟 3：將帳號加為好友 建立好 channel，可在第二個頁籤Messaging API看到Bot basic ID，這就是新增好友的 ID，也可以掃QR code。\n步驟 4：設定 Webhook 往下滑會看到Webhook settings，把Use webhook打開，上方的 URL可以先不輸入，等等再回來設定。\n步驟 5：記下程式連接Bot必要的密鑰 這兩個到時候我是添加到程式中.env的設定。\nBasic settings — Channel secret Messaging API — Channel access token 步驟 6：設定自動回覆及打招呼 在Messaging API頁籤拉到下面會看到LINE Official Account features，點選Auto-reply messages右邊的編輯可以設定。\n回應設定就看個人需求，我這邊都是打開。\n建立聊天機器人專案 這邊我是用 Node.js + MongoDB Atlas 部署到 Render\n以下是撰寫 Node.js 程式筆記 步驟 1：安裝@line/bot-sdk這個套件，並在專案底下建立一個app.js的檔案 npm i @line/bot-sdk express dotenv 步驟 2：撰寫 LINE Bot 不外乎前面就是引入@line/bot-sdk、express與dotenv這三個套件，Line 官方有提供範例程式碼。\n步驟 3：建立.env，並寫下創建 LineBot 的密鑰channelSecret及channelAccessToken。 部署至 Render 步驟 1：到官網註冊，並 Connect GitHub 步驟 2：選擇要部署的專案 點選Web Services\n設置Configure account，選擇 LineBot 專案\n步驟 3：Connect 要部署的專案 點擊Connect\n步驟 4：填寫部署資訊 步驟 5：選擇收費方案 這裡我選Free\n步驟 6：「Advanced」區塊填入環境變數 點一下「Add Environment Variable」，依照欄位填入\n步驟 7：Create Web Service 這時候就會開始進行部署\n回到 line 設定 webhook 到dashboard選擇想要的services name，進去後左上角會看見一串URL，這就是需要設定在 line webhook。\n記得要加上/callback。\n小皮妞Bot Demo 打開指令介紹：** 增加紀錄：@標題@內容 搜詢當下關鍵字：@@關鍵字 刪除當下第N筆文章：@$N 輸出當下\u0026quot;文章編號(第N*10筆)：$$$N 輸出當下第N筆文章：$$N 輸出自己\u0026quot;文章編號(第N*10筆)：$$$myN 可以群聊針對自己文章查詢 輸出不存在指令：可以隨便打測試 結語 Heroku 轉移至 Fly.io，讓我的小皮妞Bot復活，但莫名其妙被多收錢，因此再轉移至 Render。\n而 Render 優點：\n有免費計畫，且不用先綁信用卡，用起來比較安心\n每個月免費 500 分鐘建構，和 450 小時免費使用時數\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/portfolio-qq-linebot/","tags":["Render","LineBot","Line"],"title":"LineBot 關鍵字儲存查詢"},{"categories":["Notes"],"contents":"前言 由於 Heroku 取消了免費的服務\u0026hellip;個人作品都壞掉了，因此換成 Fly.io 部署\n在 Ｆly.io 建立專案 步驟 1：安裝 flyctl 這裡教學以 macOS 為例，可參考 官網 。\nbrew install flyctl 步驟 2：註冊並登入 會彈出瀏覽器視窗，可以連結 GitHub 帳號。\nflyctl auth signup flyctl auth login 步驟 3：啟動既有專案 cd 到專案後，下flyctl launch，輸入專案的名稱。\n選擇 server region，我這邊選擇香港(Hong Kong)。\n注意帳號一定要綁定信用卡才行用 會問需要使用 DB 嗎?這裡就看需求了(剛好我這個專案需要)，我就選 Yes 。\n步驟 4：開始部署 flyctl deploy 這時在終端機看到succeeded代表完成部署🎉\n可以在終端機下flyctl logs除錯\n步驟 5：訪問自己網站 可以從https://fly.io/dashboard查看所建立的 APP ，裡面會有 Hostname。\n結語 Heroku 轉移至 Fly.io，讓我的小皮妞Bot復活，但要小心不要亂搞避免產生額外費用參考。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/heroku-to-flyio/","tags":["Heroku","Fly.io"],"title":"Heroku 轉移至 Fly.io "},{"categories":["Notes"],"contents":"前言 在寫 Markdown 文章時候，想要為 link 添加 {target=\u0026quot;_blank\u0026quot;} 屬性參考文章，但卻起不了作用(會變字串)。\n這是一個連結[網站](http://example.com){target=\u0026#34;_blank\u0026#34;}的示例。 這是在猜想可能是 Hugo 版本不相容，就用上網找了解法，他說：Hugo 的安全模式可能會阻止執行 JavaScript。在安全模式下，Hugo 默認會禁用 JavaScript 和某些 HTML 標籤以增加網站的安全性。\n他說可以在config.toml進行配置，禁用 Hugo 的安全模式。\n[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true 但這個方法是可以執行另開網站，但會有安全性風險，所以我就棄用了。\n解決方案：在 Markdown 添加 ShortCodes 步驟 1：在themes/layouts底下新增一個資料夾shortcodes，並建立target-blank.html 並添加以下內容，這個 ShortCode 將創建target=\u0026quot;_blank\u0026quot;屬性，並帶兩個參數。\n.Get \u0026quot;url\u0026quot; 用來指定 Link 的 URL。 .Inner 用來指定 Link 的 文本。 \u0026lt;a href=\u0026#34;{{ .Get \u0026#34;url\u0026#34; }}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;{{ .Inner }}\u0026lt;/a\u0026gt; 步驟 2：加在想要 Markdown 中 注意 shortCode 命名盡量跟 html 文件名保持ㄧ至。\n結語 看完以上內容，可以完成解決 Hugo Markdown 連結無法另開網頁問題，如果以上有問題歡迎討論。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/target-blank-logo/","tags":["Hugo"],"title":"解決 Hugo Markdown 連結無法另開網頁問題"},{"categories":["Tech"],"contents":"前言 SEO是什麼？： SEO 代表搜索引擎優化，它是一系列策略和技術，用於提高網站在搜索引擎中的排名。\n為什麼它如此重要？： SEO 是吸引有機流量、提高品牌知名度、增加潛在客戶和改善線上業務成功的關鍵因素。\n本文的目標：以下是使用 Hugo 產生靜態網頁的 SEO 最佳化建議。\n設定頁面關鍵字 步驟 1：在該篇文章 Markdown 添加 keywords keywords: - Hugo SEO - 靜態網頁SEO - SEO最佳化建議 - 搜尋引擎優化 - 網站排名 步驟 2：添加 meta 標籤 這邊我是加在themes/layouts/partials/head.html裏面。\n{{ with .Params.keywords }} \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;{{ delimit . \u0026#34;, \u0026#34; }}\u0026#34;\u0026gt; {{ end }} {{ with .Params.keywords }}這是一個條件語句，检查文章 Markdown 文件中是否存在keywords字段 ，然而delimit用逗號和空格分隔成一個字符串。\n步驟 3：打包後看 html 結果，這樣就完成頁面關鍵字設定 \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;Hugo SEO, 靜態網頁SEO, SEO最佳化建議, 搜尋引擎優化, 網站排名\u0026#34;\u0026gt; 設定頁面標題 步驟 1：在該篇文章 Markdown 添加 title title: \u0026#34;Hugo SEO（搜尋引擎優化）實踐\u0026#34; 步驟 2：添加 title 標籤 這邊我是加在themes/layouts/partials/head.html裏面。\n這段意思是：如果當前頁面不是首頁，則會在標題中包括網站的名稱，以區分首頁和其他頁面的標題顯示方式。如果當前頁面是首頁，則只顯示頁面的標題，不包括網站名稱。 \u0026lt;title\u0026gt;{{ $isHomePage := eq .Title .Site.Title }}{{ .Title }}{{ if eq $isHomePage false }} - {{ .Site.Title }}{{ end }}\u0026lt;/title\u0026gt; 步驟 3：打包後看 html 結果，這樣就完成頁面標題設定 \u0026lt;title\u0026gt;Hugo SEO（搜尋引擎優化）實踐\u0026lt;/title\u0026gt; 設定頁面描述 步驟 1：在該篇文章 Markdown 添加 description description: \u0026#34;Hugo 產生靜態網頁的 SEO 最佳化建議\u0026#34; 步驟 2：添加 meta 標籤 這邊我是加在themes/layouts/partials/head.html裏面。\n這段意思是同頁面標題 \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;{{ with .Description }}{{ . }}{{ else }}{{ with .Site.Params.description }}{{ . }}{{ end }}{{ end }}\u0026#34;\u0026gt; 步驟 3：打包後看 html 結果，這樣就完成頁面描述設定 \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Hugo 產生靜態網頁的 SEO 最佳化建議\u0026#34;\u0026gt; 結語 正確使用關鍵字可以提高您的文章在搜尋引擎中的排名，但不要忘記提供高質量的內容和有價值的信息。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/hugo-seo/","tags":["Hugo","SEO"],"title":"Hugo SEO（搜尋引擎優化）實踐"},{"categories":["Tech"],"contents":"前言 想要針對各特定頁面觸發事件和追蹤點擊事件，該怎麼做？\n特定頁面觸發事件 步驟 1：建立事件 可到 Google Analytics 點選左下角齒輪管理/資源設定/事件創建。\n這邊舉例/about頁面事件\n可以去 Debug View 偵測事件\n步驟 2：新增轉換 可到 Google Analytics 點選左下角齒輪管理/資源設定/轉換。\n這邊舉例about_me_page事件名稱轉換\n追蹤點擊事件 步驟 1：建立事件 同上，在資源事件設定。\n這邊舉例點擊Social/github圖示事件\n步驟 2：新增轉換 同上，在資源轉換設定。\n進階實作-如何在個人網站中自訂事件發送給GA 在 Hugo 程式碼加入 gTag Event，這邊我用點擊Know More按鈕作為 Demo，只要在程式中添加以下圖是代碼就可以發事件給 GA。\n當使用者點擊具有 \u0026ldquo;knowMoreButton\u0026rdquo; ID 的按鈕時，這段 JavaScript 代碼會觸發一個自定義事件，並將事件數據發送到 Google Analytics。這個事件包括事件名稱（\u0026ldquo;know_more_button_click\u0026rdquo;）、事件類別（\u0026ldquo;按鈕點擊\u0026rdquo;）、事件標籤（\u0026ldquo;點擊了更多按鈕\u0026rdquo;）和一個可選的值（1，用於量化事件的價值）。這有助於跟踪 Google Analytics 中使用者點擊 \u0026ldquo;Know More\u0026rdquo; 按鈕的互動。\n這時在個人網頁觸發幾次Know More事件，可以在 Google Analytics 即時報表上看到數據了。\n結語 透過自訂事件\u0026amp;轉換更能追蹤自己想要的數據了🎉\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/google-analytics-setting/","tags":["GA","Google"],"title":"如何在 Google Analytics 4 自訂事件\u0026轉換"},{"categories":["Notes"],"contents":"前言 介紹通用版 GA 與 GA4 差異 通用版 GA：追蹤網頁資料為核心。\nGA4：事件為核心。\n這個簡單的表格比較了通用版 GA 和 GA4 在數據收集方式、用戶跟踪、報告功能、用戶隱私和未來支持等方面的主要差異。\n網站流量 5 大面向 訪客量：每段時間有多少訪客量。\n相關性：多少比例訪客是目標客群。\n參與度：訪客在網站上行為。\n持續性：訪客的回鍋。\n收益：這些訪客量是否帶來轉換價值或收益。\nGoogle Analytics 帳戶設定 步驟 1：Google 信號啟用 在資源設定/資料收集的 Google 信號資料收集把它打開。\n步驟 2：啟用加強評估 打開後 Google 會自動評估網站上的互動和內容，並建立成事件。\n步驟 3：事件保留時間 GA4 預設保留 2 個月，建議調整成 14 個月。\n步驟 4：歸因分析設定 報表歸因模式及回朔期調整紅匡預設內容即可。\n步驟 5：如何設定網域然後做跨網域評估 可讓跨網域評估成效，並進一步定義網站上的哪些連結，在使用加強評估時不會觸發外連點擊事件。\n例如：主網站＋另1個獨立個網域，想要合併評估成效\n如何設定：資料串流(選擇你的資料)/Google代碼(進行代碼設定)/設定網域/跨網域連結設定\n步驟 6：排除非必要流量 如何設定：資料串流(選擇你的資料)/Google代碼(進行代碼設定)/列出不適用的參照連結網址\n步驟 7：Search Console 連結 進到 Search Console 按下連結選擇帳號即可。\nGA4 事件介紹 根據現有事件，建立新事件 特定頁面：\nevent_name = page_view\npage_location 包含 xxx\n點擊事件：\nevent_name = click\nlink_url 包含 xxx\n根據值觸發事件 purchase 事件且值至少為 1000\nevent_name = purchase\nvalue 大於或等於 1000\n參數設定有打勾從來源複製事件參數，可以沿用事件既有參數配置\n可以用GA4 Debug View，測試事件\n結語 透過此篇介紹來更加了解 GA4。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/google-analytics-introduction/","tags":["GA","Google"],"title":"Google Analytics 4 介紹"},{"categories":["Tech"],"contents":"前言 目的想在 Google 被搜尋到我的個人 Blog\n開始添加 Google Search Console 步驟 1：點擊 Google Search Console，後按下「立即開始」，就可以開始設定 步驟 2：選取資源類型 點擊網址前置字元區塊，輸入個人網站網址後，按繼續，這時如果有設定好 GA，他這邊會透過 GA 去驗證你的網站，點擊前往資源。\n步驟 3：新增 Sitemap 點選側邊選單 Sitemap 填寫網址，輸入sitemap.xml即可。\nSitemap：會把網站所有頁面列出來在這個檔案裡，在把 Sitemap 這個檔案上傳到 Google Search Console上，Google 會將這些頁面存到 Google 搜尋引擎裡面，這樣別人在 Google 搜尋時就能找到你的個人網站了。 實際會在打包後產出public/sitemap.xml檔案裡，這些檔案會列出個人網站所有頁面、每個頁面修改時間，到時候會被 Google Search 就能找到。\n步驟 4：檢查 Blog 能夠被 Google 搜尋到 方法：在 Google Search 輸入site:個人網站網址\nsite:ChrisLinOvO.github.io 剛建立好可能要等明天才搜尋的到\n也可以 Google Search Console 手動建立索引，要求指定頁面加到 Google 搜尋引擎裡面\n結語 看完以上內容，趕快加入 Google Search Console，可以輕鬆查看在 Google Search 數據及報表，若要提升搜尋結果排行較前面，可進行 SEO 優化，之後會再做介紹。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/google-search-console/","tags":["Google"],"title":"添加 Google Search Console"},{"categories":["Tech"],"contents":"前言 想查看使用者對於我的網站網站互動\n開始添加 Google Analytics 步驟 1：點擊 Google Analytics，後按下「開始測量」，就可以開始設定 步驟 2：建立帳戶 輸入帳戶名稱後，往下拉下面不用改，按下一步。\n步驟 3：建立資源 輸入屬性名稱，下面報表時區、幣別可以不用改，按下一步。\n步驟 4：選擇商家資訊 選擇產業類別(平常寫的文章什麼類型)，按下一步。\n步驟 5：選擇業務目標 這裡我是選擇「產生待開發客戶」、「檢視使用者行為」，這兩個都可以透過事件追蹤功能來記錄關鍵的互動，按下建立。\n步驟 6：著手收集資料 點選網站平台後，設定您的網頁串流，輸入網站網址及名稱後，建立串流。\n步驟 7：加入 Google 代碼至主題 建立完成後會出現「網頁串流詳情」，這時按下「查看代碼操作說明」，會出現手動安裝代碼，\n將代碼貼到themes/layouts/partials/head.hml裡面即可。\n如果是下載比較新版的主題，要把舊版 GA 設定刪除，需在head.html原本設定的 GA 以及config.toml裡面googleAnalitycsID移除\n步驟 8：確認 GA 與個人網站連結成功 結語 看完以上內容，可以完成加入 GA4，至於 GA4 的靈魂「事件」可能研究過後整理一篇文章做介紹。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/hugo-google-analytics/","tags":["GA","Google","Hugo"],"title":"Hugo 添加 Google Analytics"},{"categories":["Tech"],"contents":"前言 Utterances 是一種基於 GitHub Issues 的評論系統。它允許在靜態網站中嵌入一個評論框，並將評論存儲在與自己的 GitHub 存儲庫相關聯的 Issues 中。\n安裝 Utterances 及配置 步驟 1：到安裝頁面後點選 Install 步驟 2：選擇要安裝 Utterances 的 GitHub Repository 步驟 3：添加配置至程式碼中 可由官網進行配置\n設置 repo 名稱 選擇訪客留言 issue 名稱 選擇主題 可複製產出的代碼貼在自己的 repo 這邊我是放在themes/layouts/partials資料夾建立一個comments.html，把生成的代碼複製過去。\n\u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;ChrisLinOvO/ChrisLinOvO.github.io\u0026#34; issue-term=\u0026#34;pathname\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async \u0026gt;\u0026lt;/script\u0026gt; 若每篇文章最底下要加評論，只需要在themes/layouts/_default/single.html裡加上\n{{ partial \u0026#34;comments.html\u0026#34; . }} 結語 Utterances 是一個方便的評論系統，可用於 Hugo 靜態網站，它與 GitHub 整合，並通過 Issues 存儲評論，使評論管理變得簡單而有效。添加 Utterances 評論系統可以提升您的網站的互動性和參與度。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/hugo-comments/","tags":["Hugo","Git"],"title":" Hugo 添加評論功能"},{"categories":["Tech"],"contents":"前言 之前用的 Jekyll 主題創作者沒在維護，現在版本的 GitHub 不能 build 了，轉移至 Hugo 架設個人網站\n為什麼選擇 Hugo？ Hugo 是一個以 Go 語言編寫的快速靜態網站生成器，它提供了許多優點，包括：\n速度快： Hugo 生成靜態網站的速度極快，這意味著網站的頁面將在訪問者瀏覽時迅速加載。\n主題和佈局： Hugo 具有豐富的主題和佈局選擇，使你能夠輕鬆自定義你的網站外觀。\n活躍的社群： Hugo 有一個活躍的社群，提供了大量的支持和資源，幫助你解決問題。\n易於安裝和部署： Hugo 的安裝和部署過程非常簡單，無論你是使用本地主機還是部署到網路主機，都能輕鬆完成。\n如何在 Mac 上使用 Hugo 運行個人網站？ 步驟 1：安裝 Hugo 安裝 Homebrew\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 安裝 Hugo\nbrew install hugo 確認 Hugo 安裝成功，並且有出現版本訊息\nhugo --version 因為 macOS 14 的預覽版 (pre-release version)， Homebrew 不支援，所以在安裝 Hugo 和 Git 遇到一些問題。\n可以用以下指令安裝\nbrew install --build-from-source git brew install --build-from-source hugo 步驟 2：匯入主題 這邊我是使用 liva-hugo 主題。\n這裡示範下載 git 上面 zip，下載解壓縮後，裡面有一個資料夾叫exampleSite，把他拉出來放置桌面或其他想存放的路徑。\n然後在exampleSite底下建立一個資料夾命名為themes(注意! 一定要是這個名稱 )， 然後再把解壓縮後的liva-hugo-master，改名為liva-hugo，將這個資料夾放置themes底下。\n步驟 3：啟動 Local Server 打開終端機，進去exampleSite，並啟動 server，將網址放入網頁瀏覽器中，即可以看到畫面。\nhugo server 步驟 4：設置網站配置 可以從根目錄下的config.toml文件中設置網站配置文件，包括站點標題、作者資訊、主題選擇和其他自定義設置。\n介紹其中幾個配置\nbaseURL = https://github帳號.github.io\ntitle = 網站標題配置\nlanguageCode = 網站語系配置\n[menu] = 導航配置\n[params] = 默認參數配置\n[params.search] = 搜索功能配置\n[params.cookies] = Cookie 的啟用及有效時間配置\n[params.social] = 社交媒體配置\n步驟 5：建立 GitHub Page Repository 首先到你的 GitHub 主頁，並且在右上角找到「+」，點選「New Repository」，\nRepository Name 填寫「使用者名稱.github.io」。\n步驟 6：發布至 GitHub Pages 上 編輯好後，在終端機輸入hugo，打包完成將創建一個public目錄`，\n將public裡面所有資料夾和檔案複製到 Clone 下來的使用者名稱.github.io資料夾，推上 GitHub 即可完成部署。\ngit add . \u0026amp;\u0026amp; git commit -m \u0026#34;first commit\u0026#34; \u0026amp;\u0026amp; git push 結語 遷移個人網站從 Jekyll 到 Hugo 可能需要一些工作，但它將確保你的網站保持現代化，並且更易於維護。Hugo 是一個功能豐富且強大的工具，能夠幫助你建立一個引人注目的網站，並提供快速且優質的用戶體驗。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/jekyll-to-hugo/","tags":["Hugo","Git"],"title":"使用 Hugo 在 GitHub 上架設個人網站"}]