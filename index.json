[{"categories":["Notes"],"contents":"前言 目的想在 Google 被搜尋到我的個人 Blog\n開始添加 Google Search Console 步驟 1：點擊Google Search Console，後按下「立即開始」，就可以開始設定 步驟 2：選取資源類型 點擊網址前置字元區塊，輸入個人網站網址後，按繼續，這時如果有設定好 GA，他這邊會透過 GA 去驗證你的網站，點擊前往資源。\n步驟 3：新增 Sitemap 點選側邊選單 Sitemap 填寫網址，輸入sitemap.xml即可。\nSitemap：會把網站所有頁面列出來在這個檔案裡，在把 Sitemap 這個檔案上傳到 Google Search Console上，Google 會將這些頁面存到 Google 搜尋引擎裡面，這樣別人在 Google 搜尋時就能找到你的個人網站了。 實際會在打包後產出public/sitemap.xml檔案裡，這些檔案會列出個人網站所有頁面、每個頁面修改時間，到時候會被 Google Search 就能找到。\n步驟 4：檢查 Blog 能夠被 Google 搜尋到 方法：在 Google Search 輸入site:個人網站網址\nsite:ChrisLinOvO.github.io 剛建立好可能要等明天才搜尋的到\n也可以 Google Search Console 手動建立索引，要求指定頁面加到 Google 搜尋引擎裡面\n結語 看完以上內容，趕快加入 Google Search Console，可以輕鬆查看在 Google Search 數據及報表，若要提升搜尋結果排行較前面，可進行 SEO 優化，之後會再做介紹。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/google-search/","tags":["Google"],"title":"添加 Google Search Console"},{"categories":["Notes"],"contents":"前言 想查看使用者對於我的網站網站互動\n開始添加 Google Analytics 步驟 1：點擊Google Analytics，後按下「開始測量」，就可以開始設定 步驟 2：建立帳戶 輸入帳戶名稱後，往下拉下面不用改，按下一步。\n步驟 3：建立資源 輸入屬性名稱，下面報表時區、幣別可以不用改，按下一步。\n步驟 4：選擇商家資訊 選擇產業類別(平常寫的文章什麼類型)，按下一步。\n步驟 5：選擇業務目標 這裡我是選擇「產生待開發客戶」、「檢視使用者行為」，這兩個都可以透過事件追蹤功能來記錄關鍵的互動，按下建立。\n步驟 6：著手收集資料 點選網站平台後，設定您的網頁串流，輸入網站網址及名稱後，建立串流。\n步驟 7：加入 Google 代碼至主題 建立完成後會出現「網頁串流詳情」，這時按下「查看代碼操作說明」，會出現手動安裝代碼，\n將代碼貼到themes/layouts/partials/head.hml裡面即可。\n如果是下載比較新版的主題，要把舊版 GA 設定刪除，config.toml裡面googleAnalitycsID移除。\n步驟 7：確認 GA 與個人網站連結成功 結語 看完以上內容，可以完成加入 GA4，至於 GA4 的靈魂「事件」可能研究過後整理一篇文章做介紹。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/google-analytics/","tags":["GA","Google"],"title":"添加 Google Analytics"},{"categories":["Notes"],"contents":"前言 Utterances 是一種基於 GitHub Issues 的評論系統。它允許在靜態網站中嵌入一個評論框，並將評論存儲在與自己的 GitHub 存儲庫相關聯的 Issues 中。\n安裝 Utterances 及配置 步驟 1：到安裝頁面後點選 Install 步驟 2：選擇要安裝 Utterances 的 GitHub Repository 步驟 3：添加配置至程式碼中 可由官網進行配置\n設置 repo 名稱 選擇訪客留言 issue 名稱 選擇主題 可複製產出的代碼貼在自己的 repo 這邊我是放在themes/layouts/partials資料夾建立一個comments.html，把生成的代碼複製過去。\n\u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;ChrisLinOvO/ChrisLinOvO.github.io\u0026#34; issue-term=\u0026#34;pathname\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async \u0026gt;\u0026lt;/script\u0026gt; 若每篇文章最底下要加評論，只需要在themes/layouts/_default/single.html裡加上\n{{ partial \u0026#34;comments.html\u0026#34; . }} 結語 Utterances 是一個方便的評論系統，可用於 Hugo 靜態網站，它與 GitHub 整合，並通過 Issues 存儲評論，使評論管理變得簡單而有效。添加 Utterances 評論系統可以提升您的網站的互動性和參與度。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/add-comments/","tags":["Hugo","Git"],"title":" Hugo 添加評論功能"},{"categories":["Notes"],"contents":"前言 之前用的 Jekyll 主題創作者沒在維護，現在版本的 GitHub 不能 build 了，轉移至 Hugo 架設個人網站\n為什麼選擇 Hugo？ Hugo 是一個以 Go 語言編寫的快速靜態網站生成器，它提供了許多優點，包括：\n速度快： Hugo 生成靜態網站的速度極快，這意味著網站的頁面將在訪問者瀏覽時迅速加載。\n主題和佈局： Hugo 具有豐富的主題和佈局選擇，使你能夠輕鬆自定義你的網站外觀。\n活躍的社群： Hugo 有一個活躍的社群，提供了大量的支持和資源，幫助你解決問題。\n易於安裝和部署： Hugo 的安裝和部署過程非常簡單，無論你是使用本地主機還是部署到網路主機，都能輕鬆完成。\n如何在 Mac 上使用 Hugo 運行個人網站？ 步驟 1：安裝 Hugo 安裝 Homebrew\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 安裝 Hugo\nbrew install hugo 確認 Hugo 安裝成功，並且有出現版本訊息\nhugo --version 因為 macOS 14 的預覽版 (pre-release version)， Homebrew 不支援，所以在安裝 Hugo 和 Git 遇到一些問題。\n可以用以下指令安裝\nbrew install --build-from-source git brew install --build-from-source hugo 步驟 2：匯入主題 這邊我是使用 liva-hugo 主題。\n這裡示範下載 git 上面 zip，下載解壓縮後，裡面有一個資料夾叫exampleSite，把他拉出來放置桌面或其他想存放的路徑。\n然後在exampleSite底下建立一個資料夾命名為themes(注意! 一定要是這個名稱 )， 然後再把解壓縮後的liva-hugo-master，改名為liva-hugo，將這個資料夾放置themes底下。\n步驟 3：啟動 Local Server 打開終端機，進去exampleSite，並啟動 server，將網址放入網頁瀏覽器中，即可以看到畫面。\nhugo server 步驟 4：設置網站配置 可以從根目錄下的config.toml文件中設置網站配置文件，包括站點標題、作者資訊、主題選擇和其他自定義設置。\n介紹其中幾個配置\nbaseURL = https://github帳號.github.io\ntitle = 網站標題配置\nlanguageCode = 網站語系配置\n[menu] = 導航配置\n[params] = 默認參數配置\n[params.search] = 搜索功能配置\n[params.cookies] = Cookie 的啟用及有效時間配置\n[params.social] = 社交媒體配置\n步驟 5：建立 GitHub Page Repository 首先到你的 GitHub 主頁，並且在右上角找到「+」，點選「New Repository」，\nRepository Name 填寫「使用者名稱.github.io」。\n步驟 6：發布至 GitHub Pages 上 編輯好後，在終端機輸入hugo，打包完成將創建一個public目錄`，\n將public裡面所有資料夾和檔案複製到 Clone 下來的使用者名稱.github.io資料夾，推上 GitHub 即可完成部署。\ngit add . \u0026amp;\u0026amp; git commit -m \u0026#34;first commit\u0026#34; \u0026amp;\u0026amp; git push 結語 遷移個人網站從 Jekyll 到 Hugo 可能需要一些工作，但它將確保你的網站保持現代化，並且更易於維護。Hugo 是一個功能豐富且強大的工具，能夠幫助你建立一個引人注目的網站，並提供快速且優質的用戶體驗。\n","permalink":"https://ChrisLinOvO.github.io/blogs/2023/10/jekyll-to-hugo/","tags":["Hugo","Git"],"title":"使用 Hugo 在 GitHub 上架設個人網站"}]